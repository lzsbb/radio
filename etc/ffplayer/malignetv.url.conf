# deinterlace when frame are interlaced.
# use the dummy "discard" algorithm (waiting for a better one), as it is still better than no deinterlacing
player.video.deinterlaced = discard_bottom


# options for AV stream coming from MaLigne TV
# all values in microseconds

#audio / video offset. postivie value <=> play audio before it should
player.sync.offset=0

# jitter control options


#		Jitter control:
#		we record:
#		the filtered minimum of audio & video buffering time 
#		it gives us a graph like the following one where the buffering value oscillate between 0, 
#		a "LAbort".(never can go higher)
#		
#		     LAbort ---------------------------------------------------
#		                                     ____
#		      LFlush ------------------     / B  \ --------------------
#		                                   /     \       _D
#		    LSpeedUp ---------------------/----- \ ---- / \_   --------
#		                                 /       \     /    \_
#		        LHi  -------------------/--------\____/------ \_   ----
#		                               /           C            \______
#		                              /                          E
#		             --_             /
#		                \          _/
#		        LLo  --- \_       /    -------------------------------------
#		                   \     /
#		 LSpeedDown --------\_A_/
#		        0  ________________________________________________________
#		
#		
#		- LSpeedDown (A) : we estimate that the buffering level is too short to be safe.
#		           In this case, we play audio slower, to slighlty increase the buffering, until we reach LLo
#		
#		- LFlush (B -> C) : a high buffering level when it is time to flush packets, without decoding them.
#		           when we enter this state, we keep decreasing the buffering until level reach LHi at least.
#		
#		- LSpeedUp (D) : the level is High, but not too high to need to flush.
#		           Just try to play audio faster until we reach LHi
#		
#		- Between LLo and LHi : buffering is good. not too large (delay), not too small (under buffering issues)




player.sync.jitter_control_enable=1  

player.time_stretch.fast_speed   =105
player.time_stretch.normal_speed =100
player.time_stretch.slow_speed   =90


player.sync.jitter_control_period=1000000  # how often do we take decisions

player.sync.LAbort      =   7000000 
player.sync.LFlush      =   6000000
player.sync.LSpeedUp    =   5000000
player.sync.LHi         =   4000000
player.sync.LLo         =   3500000 
player.sync.LSpeedDown  =   1500000 
player.sync.initial_prebuff= 500000   # initial pre-bufferisation before playing





# speed up zapping
player.find_stream_info.flush_pkt=1
player.mpegts.scan_pat_first=1
player.find_stream_info.force_video=720x480/YUV422

#
# Now, append some option for the UDP socket configuration
#

append: multicast=1
append: grow_queue=1
append: pkt_size=1472

# skip 12 bytes from udp packet
append: head_skip=12

# in case we don't receive a UDP packet for more than
# 2500 ms, consider the stream is closed (and avoid the watchdog)
append: eof_timeout=2500

